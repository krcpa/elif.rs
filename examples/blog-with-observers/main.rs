use elif_orm::{ModelLifecycle, EventError};

mod observers;

use observers::{
    User, Post,
    UserObserver, PostObserver, AuditObserver, SecurityAuditObserver
};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("üéØ elif.rs Model Events and Observers Example\n");
    
    // Create the model lifecycle manager
    let mut lifecycle = ModelLifecycle::new();
    
    // Register observers for different models
    println!("üìù Registering observers...");
    
    // User observers
    lifecycle.register_observer::<User>(Box::new(UserObserver));
    lifecycle.register_observer::<User>(Box::new(AuditObserver::new("users")));
    lifecycle.register_observer::<User>(Box::new(SecurityAuditObserver::new("users")));
    
    // Post observers  
    lifecycle.register_observer::<Post>(Box::new(PostObserver));
    lifecycle.register_observer::<Post>(Box::new(AuditObserver::new("posts")));
    
    println!("‚úÖ Observers registered successfully!\n");
    
    // Example 1: User creation flow
    println!("üë§ Example 1: Creating a new user");
    println!("================================");
    
    let mut user = User {
        id: 1,
        name: "Alice Johnson".to_string(),
        email: "ALICE@EXAMPLE.COM".to_string(), // Will be normalized
    };
    
    match lifecycle.trigger_create_flow(&mut user).await {
        Ok(()) => {
            println!("‚úÖ User created successfully!");
            println!("   Final user: {:?}\n", user);
        }
        Err(e) => {
            println!("‚ùå User creation failed: {}\n", e);
        }
    }
    
    // Example 2: User update flow
    println!("üë§ Example 2: Updating user information");
    println!("=======================================");
    
    let original_user = user.clone();
    user.name = "Alice Johnson-Smith".to_string();
    user.email = "alice.smith@example.com".to_string();
    
    match lifecycle.trigger_update_flow(&mut user, &original_user).await {
        Ok(()) => {
            println!("‚úÖ User updated successfully!");
            println!("   Updated user: {:?}\n", user);
        }
        Err(e) => {
            println!("‚ùå User update failed: {}\n", e);
        }
    }
    
    // Example 3: Post creation flow
    println!("üìù Example 3: Creating a new blog post");
    println!("======================================");
    
    let mut post = Post {
        id: 1,
        title: "Getting Started with elif.rs Model Events!".to_string(),
        content: "This is an example post showing how model events work in elif.rs...".to_string(),
        author_id: user.id,
        published: true,
        published_at: None, // Will be set by observer
        slug: String::new(), // Will be generated by observer
    };
    
    match lifecycle.trigger_create_flow(&mut post).await {
        Ok(()) => {
            println!("‚úÖ Post created successfully!");
            println!("   Final post: {:?}\n", post);
        }
        Err(e) => {
            println!("‚ùå Post creation failed: {}\n", e);
        }
    }
    
    // Example 4: Post update flow (publishing/unpublishing)
    println!("üìù Example 4: Updating post status");
    println!("==================================");
    
    let original_post = post.clone();
    post.title = "Getting Started with elif.rs Model Events - Updated!".to_string();
    post.published = false; // Unpublishing
    
    match lifecycle.trigger_update_flow(&mut post, &original_post).await {
        Ok(()) => {
            println!("‚úÖ Post updated successfully!");
            println!("   Updated post: {:?}\n", post);
        }
        Err(e) => {
            println!("‚ùå Post update failed: {}\n", e);
        }
    }
    
    // Example 5: Error handling - validation failure
    println!("‚ùå Example 5: Demonstrating error handling");
    println!("==========================================");
    
    let mut invalid_user = User {
        id: 2,
        name: "Test User".to_string(),
        email: "duplicate@example.com".to_string(), // This will trigger validation error
    };
    
    match lifecycle.trigger_create_flow(&mut invalid_user).await {
        Ok(()) => {
            println!("‚úÖ User created (unexpected!)");
        }
        Err(e) => {
            println!("‚ùå User creation failed as expected: {}", e);
            match e {
                EventError::Validation { message, hint } => {
                    println!("   Validation error: {}", message);
                    if let Some(h) = hint {
                        println!("   Hint: {}", h);
                    }
                }
                _ => {}
            }
        }
    }
    
    println!("\nüéâ Example completed!");
    println!("\nThis example demonstrates:");
    println!("‚Ä¢ Automatic email normalization during user creation");
    println!("‚Ä¢ Slug generation for blog posts");  
    println!("‚Ä¢ Timestamp management for published posts");
    println!("‚Ä¢ Comprehensive audit logging for all operations");
    println!("‚Ä¢ Security monitoring for sensitive operations");
    println!("‚Ä¢ Validation and error handling");
    println!("‚Ä¢ Event propagation and observer chaining");
    
    Ok(())
}

#[cfg(test)]
mod integration_tests {
    use super::*;

    #[tokio::test]
    async fn test_full_user_lifecycle() {
        let mut lifecycle = ModelLifecycle::new();
        lifecycle.register_observer::<User>(Box::new(UserObserver));
        
        // Create user
        let mut user = User {
            id: 1,
            name: "Test User".to_string(),
            email: "TEST@EXAMPLE.COM".to_string(),
        };
        
        let result = lifecycle.trigger_create_flow(&mut user).await;
        assert!(result.is_ok());
        assert_eq!(user.email, "test@example.com"); // Should be normalized
        
        // Update user
        let original = user.clone();
        user.name = "Updated User".to_string();
        
        let result = lifecycle.trigger_update_flow(&mut user, &original).await;
        assert!(result.is_ok());
        
        // Delete user
        let result = lifecycle.trigger_delete_flow(&user).await;
        assert!(result.is_ok());
    }
    
    #[tokio::test]
    async fn test_full_post_lifecycle() {
        let mut lifecycle = ModelLifecycle::new();
        lifecycle.register_observer::<Post>(Box::new(PostObserver));
        
        // Create post
        let mut post = Post {
            id: 1,
            title: "Test Post Title!".to_string(),
            content: "Content here".to_string(),
            author_id: 1,
            published: true,
            published_at: None,
            slug: String::new(),
        };
        
        let result = lifecycle.trigger_create_flow(&mut post).await;
        assert!(result.is_ok());
        assert_eq!(post.slug, "test-post-title");
        assert!(post.published_at.is_some());
        
        // Update post
        let original = post.clone();
        post.title = "Updated Title".to_string();
        
        let result = lifecycle.trigger_update_flow(&mut post, &original).await;
        assert!(result.is_ok());
        assert_eq!(post.slug, "updated-title");
        
        // Delete post
        let result = lifecycle.trigger_delete_flow(&post).await;
        assert!(result.is_ok());
    }
}