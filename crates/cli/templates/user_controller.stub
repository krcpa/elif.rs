use elif::prelude::*;
use crate::services::user_service::UserService;
use std::sync::Arc;

#[controller("/api/users")]
pub struct UserController {
    user_service: Arc<UserService>,
}

impl UserController {
    pub fn new(user_service: Arc<UserService>) -> Self {
        Self { user_service }
    }

    #[get("")]
    pub async fn index(&self, _req: Request) -> HttpResult<Response> {
        let users = self.user_service.list_users().await?;
        Response::ok().json(&users)
    }

    #[get("/{id}")]
    pub async fn show(&self, req: Request) -> HttpResult<Response> {
        let id = req.path_param("id")?;
        let user = self.user_service.get_user(id).await?;
        Response::ok().json(&user)
    }

    #[post("")]
    pub async fn create(&self, req: Request) -> HttpResult<Response> {
        let data = req.json_body().await?;
        let user = self.user_service.create_user(data).await?;
        Response::created().json(&user)
    }

    #[put("/{id}")]
    pub async fn update(&self, req: Request) -> HttpResult<Response> {
        let id = req.path_param("id")?;
        let data = req.json_body().await?;
        let user = self.user_service.update_user(id, data).await?;
        Response::ok().json(&user)
    }

    #[delete("/{id}")]
    pub async fn destroy(&self, req: Request) -> HttpResult<Response> {
        let id = req.path_param("id")?;
        self.user_service.delete_user(id).await?;
        Response::no_content()
    }
}