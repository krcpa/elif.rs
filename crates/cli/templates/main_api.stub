use elif_http::{Server, Router, get, ElifRequest, ElifResponse, HttpResult};
{% if modules_enabled %}use elif_core::container::Container;{% endif %}
{% if database_enabled %}use sqlx::PgPool;{% endif %}

{% if modules_enabled %}mod modules;
use modules::app_module::AppModule;{% endif %}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    {% if modules_enabled %}// Initialize IoC container with modules
    let container = Container::builder()
        .register_module(AppModule)
        .build()?;{% endif %}
    {% if database_enabled %}
    // Initialize database connection
    let database_url = std::env::var("DATABASE_URL")?;
    let pool = PgPool::connect(&database_url).await?;{% endif %}

    let router = Router::new(){% if modules_enabled %}
        .with_container(container){% endif %}
        .route("/", get(hello))
        .route("/health", get(health_check)){% if auth_enabled %}
        .route("/auth/login", post(auth_login))
        .route("/auth/register", post(auth_register)){% endif %};

    println!("ðŸš€ Starting {{ project_name }} server on http://127.0.0.1:3000");
    println!("ðŸ“Š Health check: http://127.0.0.1:3000/health");
    println!("ðŸ“š API docs: http://127.0.0.1:3000/docs");
    
    Server::new()
        .router(router)
        .listen("127.0.0.1:3000")
        .await?;

    Ok(())
}

async fn hello(_req: ElifRequest) -> HttpResult<ElifResponse> {
    Ok(ElifResponse::json(&serde_json::json!({
        "message": "Hello from {{ project_name }} - Built with elif.rs! ðŸ¦€",
        "framework": "elif.rs",
        "version": "0.8.0",
        "project": "{{ project_name }}"
    }))?)
}

async fn health_check(_req: ElifRequest) -> HttpResult<ElifResponse> {
    Ok(ElifResponse::json(&serde_json::json!({
        "status": "healthy",
        "timestamp": chrono::Utc::now(),
        "service": "{{ project_name }}"
    }))?)
}
{% if auth_enabled %}
async fn auth_login(_req: ElifRequest) -> HttpResult<ElifResponse> {
    // TODO: Implement authentication login
    Ok(ElifResponse::json(&serde_json::json!({
        "message": "Login endpoint - implement authentication logic here"
    }))?)
}

async fn auth_register(_req: ElifRequest) -> HttpResult<ElifResponse> {
    // TODO: Implement user registration
    Ok(ElifResponse::json(&serde_json::json!({
        "message": "Register endpoint - implement registration logic here"
    }))?)
}{% endif %}