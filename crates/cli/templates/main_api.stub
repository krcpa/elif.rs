use elif::prelude::*;
use elif_core::config::HttpConfig;
{% if modules_enabled %}use elif_core::container::{Container, IocContainer};
use modules::app_module::AppModule;

mod modules;{% endif %}
{% if database_enabled %}use sqlx::PgPool;{% endif %}

// Add controllers and services
mod controllers;
mod services;

use controllers::user_controller::UserController;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    {% if modules_enabled %}// Initialize IoC container with modules
    let container = Container::new();
    // TODO: Register your services and controllers here
    let ioc_container = IocContainer::new(container);{% endif %}
    {% if database_enabled %}
    // Initialize database connection
    let database_url = std::env::var("DATABASE_URL")?;
    let pool = PgPool::connect(&database_url).await?;{% endif %}

    let router = Router::new()
        .route("/", get(hello))
        .route("/health", get(health_check)){% if auth_enabled %}
        .route("/auth/login", post(auth_login))
        .route("/auth/register", post(auth_register)){% endif %}
        .controller(UserController);

    println!("ðŸš€ Starting {{ project_name }} server on http://127.0.0.1:3000");
    println!("ðŸ“Š Health check: http://127.0.0.1:3000/health");
    println!("ðŸ“š API docs: http://127.0.0.1:3000/docs");
    
    let config = HttpConfig::default();
    {% if modules_enabled %}let server = Server::new(ioc_container, config)?;
    server.router(router).listen("127.0.0.1:3000").await?;{% else %}Server::default().router(router).listen("127.0.0.1:3000").await?;{% endif %}

    Ok(())
}

async fn hello(_req: Request) -> HttpResult<Response> {
    Response::ok().json(&serde_json::json!({
        "message": "Hello from {{ project_name }} - Built with elif.rs! ðŸ¦€",
        "framework": "elif.rs",
        "version": "0.8.0",
        "project": "{{ project_name }}"
    }))
}

async fn health_check(_req: Request) -> HttpResult<Response> {
    Response::ok().json(&serde_json::json!({
        "status": "healthy",
        "timestamp": chrono::Utc::now(),
        "service": "{{ project_name }}"
    }))
}
{% if auth_enabled %}
async fn auth_login(_req: Request) -> HttpResult<Response> {
    // TODO: Implement authentication login
    Response::ok().json(&serde_json::json!({
        "message": "Login endpoint - implement authentication logic here"
    }))
}

async fn auth_register(_req: Request) -> HttpResult<Response> {
    // TODO: Implement user registration
    Response::ok().json(&serde_json::json!({
        "message": "Register endpoint - implement registration logic here"
    }))
}{% endif %}